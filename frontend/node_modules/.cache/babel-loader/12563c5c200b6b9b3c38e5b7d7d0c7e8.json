{"ast":null,"code":"import { updateToken } from \"../api/auth\";\nimport { getCookie, setCookie } from \"./cookies\";\nexport const tokenChecker = error => {\n  var _error$response;\n\n  const accessToken = getCookie(\"AccessToken\");\n  const refreshToken = getCookie(\"RefreshToken\");\n\n  if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && accessToken && refreshToken) {\n    console.log(\"Trying to refresh token\");\n    updateToken({\n      access_token: accessToken,\n      refresh_token: refreshToken\n    }).then(res => {\n      setCookie(\"AccessToken\", res.data.access_token, {\n        'max-age': 3600 * 24 * 7\n      });\n      setCookie(\"RefreshToken\", res.data.refresh_token, {\n        'max-age': 3600 * 24 * 7\n      });\n      document.location.reload();\n    }).catch(error => {\n      console.error(\"Token refresh unsuccessful\", error.response);\n      window.location = \"/login\";\n    });\n  } else {\n    console.error(\"No tokens were founded\", error.response);\n    window.location = \"/login\";\n  }\n};\nexport const isTokenExpired = () => {\n  console.log(getJWTData().exp, new Date() / 1000);\n  return getJWTData().exp < new Date() / 1000;\n};\nexport const getJWTData = () => {\n  const token = getCookie(\"AccessToken\");\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n};","map":{"version":3,"sources":["E:/education/Phyton/Projercts/my_course_works/course_3/src/utils/token.js"],"names":["updateToken","getCookie","setCookie","tokenChecker","error","accessToken","refreshToken","response","status","console","log","access_token","refresh_token","then","res","data","document","location","reload","catch","window","isTokenExpired","getJWTData","exp","Date","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,WAArC;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAMC,WAAW,GAAGJ,SAAS,CAAC,aAAD,CAA7B;AACA,QAAMK,YAAY,GAAGL,SAAS,CAAC,cAAD,CAA9B;;AAEA,MAAI,CAAAG,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEG,QAAP,oEAAiBC,MAAjB,MAA4B,GAA5B,IAAmCH,WAAnC,IAAkDC,YAAtD,EAAoE;AAClEG,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAV,IAAAA,WAAW,CAAC;AAACW,MAAAA,YAAY,EAAEN,WAAf;AAA4BO,MAAAA,aAAa,EAAEN;AAA3C,KAAD,CAAX,CACGO,IADH,CACQC,GAAG,IAAI;AACXZ,MAAAA,SAAS,CAAC,aAAD,EAAgBY,GAAG,CAACC,IAAJ,CAASJ,YAAzB,EAAuC;AAAE,mBAAW,OAAO,EAAP,GAAY;AAAzB,OAAvC,CAAT;AACAT,MAAAA,SAAS,CAAC,cAAD,EAAiBY,GAAG,CAACC,IAAJ,CAASH,aAA1B,EAAyC;AAAE,mBAAW,OAAO,EAAP,GAAY;AAAzB,OAAzC,CAAT;AACAI,MAAAA,QAAQ,CAACC,QAAT,CAAkBC,MAAlB;AACD,KALH,EAMGC,KANH,CAMSf,KAAK,IAAI;AACdK,MAAAA,OAAO,CAACL,KAAR,CAAc,4BAAd,EAA4CA,KAAK,CAACG,QAAlD;AACAa,MAAAA,MAAM,CAACH,QAAP,GAAkB,QAAlB;AACD,KATH;AAUD,GAZD,MAYO;AACLR,IAAAA,OAAO,CAACL,KAAR,CAAc,wBAAd,EAAwCA,KAAK,CAACG,QAA9C;AACAa,IAAAA,MAAM,CAACH,QAAP,GAAkB,QAAlB;AACD;AACF,CApBM;AAsBP,OAAO,MAAMI,cAAc,GAAG,MAAM;AAClCZ,EAAAA,OAAO,CAACC,GAAR,CAAYY,UAAU,GAAGC,GAAzB,EAA8B,IAAIC,IAAJ,KAAW,IAAzC;AACA,SAAOF,UAAU,GAAGC,GAAb,GAAmB,IAAIC,IAAJ,KAAW,IAArC;AACD,CAHM;AAKP,OAAO,MAAMF,UAAU,GAAG,MAAM;AAC9B,QAAMG,KAAK,GAAGxB,SAAS,CAAC,aAAD,CAAvB;AACA,QAAMyB,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAlB;AACA,QAAMC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAf;AACA,QAAMC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAD,CAAJ,CAAaD,KAAb,CAAmB,EAAnB,EAAuBM,GAAvB,CAA2B,UAASC,CAAT,EAAY;AAC5E,WAAO,MAAM,CAAC,OAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAR,EAAsCC,KAAtC,CAA4C,CAAC,CAA7C,CAAb;AACD,GAFsC,EAEpCC,IAFoC,CAE/B,EAF+B,CAAD,CAAtC;AAIA,SAAOC,IAAI,CAACC,KAAL,CAAWV,WAAX,CAAP;AACD,CATM","sourcesContent":["import { updateToken } from \"../api/auth\";\r\nimport { getCookie, setCookie } from \"./cookies\";\r\n\r\nexport const tokenChecker = (error) => {\r\n  const accessToken = getCookie(\"AccessToken\");\r\n  const refreshToken = getCookie(\"RefreshToken\");\r\n\r\n  if (error?.response?.status === 401 && accessToken && refreshToken) {\r\n    console.log(\"Trying to refresh token\");\r\n    updateToken({access_token: accessToken, refresh_token: refreshToken})\r\n      .then(res => {\r\n        setCookie(\"AccessToken\", res.data.access_token, { 'max-age': 3600 * 24 * 7 });\r\n        setCookie(\"RefreshToken\", res.data.refresh_token, { 'max-age': 3600 * 24 * 7 });\r\n        document.location.reload();\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Token refresh unsuccessful\", error.response);\r\n        window.location = \"/login\";\r\n      })\r\n  } else {\r\n    console.error(\"No tokens were founded\", error.response);\r\n    window.location = \"/login\";\r\n  }\r\n};\r\n\r\nexport const isTokenExpired = () => {\r\n  console.log(getJWTData().exp, new Date()/1000)\r\n  return getJWTData().exp < new Date()/1000;\r\n};\r\n\r\nexport const getJWTData = () => {\r\n  const token = getCookie(\"AccessToken\");\r\n  const base64Url = token.split('.')[1];\r\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n  }).join(''));\r\n\r\n  return JSON.parse(jsonPayload);\r\n};"]},"metadata":{},"sourceType":"module"}